
.. _program_listing_file__home_runner_work_reactor-cpp_reactor-cpp_include_reactor-cpp_impl_port_impl.hh:

Program Listing for File port_impl.hh
=====================================

|exhale_lsh| :ref:`Return to documentation for file <file__home_runner_work_reactor-cpp_reactor-cpp_include_reactor-cpp_impl_port_impl.hh>` (``/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/impl/port_impl.hh``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   /*
    * Copyright (C) 2019 TU Dresden
    * All rights reserved.
    *
    * Authors:
    *   Christian Menard
    */
   
   #include "../assert.hh"
   #include "../environment.hh"
   
   namespace reactor {
   
   template <class T>
   const std::set<Port<T>*>& Port<T>::typed_outward_bindings() const {
     // HACK this cast is ugly but should be safe as long as we only allow to
     // bind with Port<T>*. The alternative would be to copy the entire set and
     // cast each element individually, which is also ugly...
     return reinterpret_cast<const std::set<Port<T>*>&>(outward_bindings());
   }
   
   template <class T>
   Port<T>* Port<T>::typed_inward_binding() const {
     return dynamic_cast<Port<T>*>(inward_binding());
   }
   
   template <class T>
   void Port<T>::set(const ImmutableValuePtr<T>& value_ptr) {
     VALIDATE(!has_inward_binding(),
              "set() may only be called on a ports that do not have an inward "
              "binding!");
     auto scheduler = environment()->scheduler();
     this->value_ptr = std::move(value_ptr);
     scheduler->set_port(this);
   }
   
   template <class T>
   const ImmutableValuePtr<T>& Port<T>::get() const {
     if (has_inward_binding()) {
       return typed_inward_binding()->get();
     } else {
       return value_ptr;
     }
   }
   
   template <class T>
   bool Port<T>::is_present() const {
     if (has_inward_binding()) {
       return typed_inward_binding()->is_present();
     } else {
       return value_ptr != nullptr;
     }
   }
   
   }  // namespace reactor
