<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="scheduler_8cc" kind="file" language="C++">
    <compoundname>scheduler.cc</compoundname>
    <includes refid="scheduler_8hh" local="yes">reactor-cpp/scheduler.hh</includes>
    <includes refid="action_8hh" local="yes">reactor-cpp/action.hh</includes>
    <includes refid="assert_8hh" local="yes">reactor-cpp/assert.hh</includes>
    <includes refid="environment_8hh" local="yes">reactor-cpp/environment.hh</includes>
    <includes refid="logging_8hh" local="yes">reactor-cpp/logging.hh</includes>
    <includes refid="port_8hh" local="yes">reactor-cpp/port.hh</includes>
    <includes refid="reaction_8hh" local="yes">reactor-cpp/reaction.hh</includes>
    <includes refid="trace_8hh" local="yes">reactor-cpp/trace.hh</includes>
    <incdepgraph>
      <node id="549">
        <label>functional</label>
      </node>
      <node id="573">
        <label>reactor-cpp/logging.hh</label>
        <link refid="logging_8hh"/>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="566" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
      </node>
      <node id="570">
        <label>cassert</label>
      </node>
      <node id="571">
        <label>stdexcept</label>
      </node>
      <node id="578">
        <label>reactor-cpp/trace.hh</label>
        <link refid="trace_8hh"/>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
      </node>
      <node id="564">
        <label>string</label>
      </node>
      <node id="575">
        <label>reactor-cpp/port.hh</label>
        <link refid="port_8hh"/>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="576" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>map</label>
      </node>
      <node id="569">
        <label>../assert.hh</label>
        <link refid="assert_8hh"/>
        <childnode refid="570" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="571" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
      </node>
      <node id="556">
        <label>fwd.hh</label>
        <link refid="fwd_8hh"/>
      </node>
      <node id="577">
        <label>reactor-cpp/reaction.hh</label>
        <link refid="reaction_8hh"/>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
      </node>
      <node id="568">
        <label>impl/action_impl.hh</label>
        <link refid="action__impl_8hh"/>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
      </node>
      <node id="548">
        <label>condition_variable</label>
      </node>
      <node id="557">
        <label>logical_time.hh</label>
        <link refid="logical__time_8hh"/>
        <childnode refid="558" relation="include">
        </childnode>
      </node>
      <node id="550">
        <label>future</label>
      </node>
      <node id="555">
        <label>vector</label>
      </node>
      <node id="565">
        <label>value_ptr.hh</label>
        <link refid="value__ptr_8hh"/>
        <childnode refid="566" relation="include">
        </childnode>
        <childnode refid="567" relation="include">
        </childnode>
      </node>
      <node id="563">
        <label>sstream</label>
      </node>
      <node id="547">
        <label>reactor-cpp/scheduler.hh</label>
        <link refid="scheduler_8hh"/>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="554" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
      </node>
      <node id="560">
        <label>iostream</label>
      </node>
      <node id="546">
        <label>/home/runner/work/reactor-cpp/reactor-cpp/lib/scheduler.cc</label>
        <link refid="scheduler_8cc"/>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="575" relation="include">
        </childnode>
        <childnode refid="577" relation="include">
        </childnode>
        <childnode refid="578" relation="include">
        </childnode>
      </node>
      <node id="558">
        <label>time.hh</label>
        <link refid="time_8hh"/>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
      </node>
      <node id="552">
        <label>mutex</label>
      </node>
      <node id="559">
        <label>chrono</label>
      </node>
      <node id="574">
        <label>config.hh</label>
      </node>
      <node id="554">
        <label>thread</label>
      </node>
      <node id="562">
        <label>reactor.hh</label>
        <link refid="reactor_8hh"/>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
      </node>
      <node id="567">
        <label>type_traits</label>
      </node>
      <node id="553">
        <label>set</label>
      </node>
      <node id="576">
        <label>impl/port_impl.hh</label>
        <link refid="port__impl_8hh"/>
        <childnode refid="569" relation="include">
        </childnode>
        <childnode refid="572" relation="include">
        </childnode>
      </node>
      <node id="572">
        <label>../environment.hh</label>
        <link refid="environment_8hh"/>
        <childnode refid="553" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
      </node>
      <node id="561">
        <label>reactor-cpp/action.hh</label>
        <link refid="action_8hh"/>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
        <childnode refid="568" relation="include">
        </childnode>
      </node>
      <node id="566">
        <label>memory</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacereactor">reactor</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2019<sp/>TU<sp/>Dresden</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Authors:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Christian<sp/>Menard</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scheduler_8hh" kindref="compound">reactor-cpp/scheduler.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="action_8hh" kindref="compound">reactor-cpp/action.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assert_8hh" kindref="compound">reactor-cpp/assert.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="environment_8hh" kindref="compound">reactor-cpp/environment.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logging_8hh" kindref="compound">reactor-cpp/logging.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="port_8hh" kindref="compound">reactor-cpp/port.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reaction_8hh" kindref="compound">reactor-cpp/reaction.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="trace_8hh" kindref="compound">reactor-cpp/trace.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacereactor" kindref="compound">reactor</ref><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a0ba1d794dc627f7927e5c0457f612960" kindref="member">Scheduler::work</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>worker<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>id;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>(<ref refid="classreactor_1_1Scheduler_1a3f06ec50b64251aeca469a137b3fdf9b" kindref="member">m_reaction_queue</ref>);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1ae0b036e6af4ebf47f619bf6ac4b7120d" kindref="member">cv_ready_reactions</ref>.wait(</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!this-&gt;<ref refid="classreactor_1_1Scheduler_1a03e5a171cbb041f02fd10fedf7f2f7de" kindref="member">ready_reactions</ref>.empty()<sp/>||<sp/><ref refid="classreactor_1_1Scheduler_1a25e5b848efc680452eef58a0fc0b773c" kindref="member">terminate</ref>;<sp/>});</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1a25e5b848efc680452eef58a0fc0b773c" kindref="member">terminate</ref>)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.unlock();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>reaction<sp/>=<sp/><ref refid="classreactor_1_1Scheduler_1a03e5a171cbb041f02fd10fedf7f2f7de" kindref="member">ready_reactions</ref>.back();</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a03e5a171cbb041f02fd10fedf7f2f7de" kindref="member">ready_reactions</ref>.pop_back();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a606c5c5af3e45a75b7304fdfd0283e14" kindref="member">executing_reactions</ref>.insert(reaction);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.unlock();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Execute<sp/>reaction<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>reaction-&gt;fqn();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>the<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>reaction_execution_starts,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>reaction-&gt;fqn());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>reaction-&gt;trigger();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>reaction_execution_finishes,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,<sp/>reaction-&gt;fqn());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.lock();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a606c5c5af3e45a75b7304fdfd0283e14" kindref="member">executing_reactions</ref>.erase(reaction);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.unlock();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a5ce0b7fa5a71eaf46b1d423c1ff90557" kindref="member">cv_done_reactions</ref>.notify_one();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Stopping<sp/>worker<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>id;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a2366bac3be216dbba49e110a69250ece" kindref="member">Scheduler::start</ref>()<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Starting<sp/>the<sp/>scheduler...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>reaction<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a65b74e5e2d64189fe30010140a2f8dad" kindref="member">reaction_queue</ref>.resize(<ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>-&gt;<ref refid="classreactor_1_1Environment_1a2d50de0d09d5aa56a9876441233590f0" kindref="member">max_reaction_index</ref>()<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1ac4b787be81d8b6d7a72ce987d24a2261" kindref="member">using_workers</ref>)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>start<sp/>worker<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/><ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>-&gt;<ref refid="classreactor_1_1Environment_1a3348b53c1d45a315920832d7505f9057" kindref="member">num_workers</ref>()<sp/>+<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1aad3a17b14df9166b175a3d5baf5afd14" kindref="member">worker_threads</ref>.emplace_back([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>i]()<sp/>{<sp/>this-&gt;<ref refid="classreactor_1_1Scheduler_1a0ba1d794dc627f7927e5c0457f612960" kindref="member">work</ref>(i);<sp/>});</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1ad1c1bbd55c9933b9e5886d378419185c" kindref="member">next</ref>())<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lg(<ref refid="classreactor_1_1Scheduler_1a3f06ec50b64251aeca469a137b3fdf9b" kindref="member">m_reaction_queue</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a25e5b848efc680452eef58a0fc0b773c" kindref="member">terminate</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1ae0b036e6af4ebf47f619bf6ac4b7120d" kindref="member">cv_ready_reactions</ref>.notify_all();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>join<sp/>all<sp/>worker<sp/>threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>t<sp/>:<sp/><ref refid="classreactor_1_1Scheduler_1aad3a17b14df9166b175a3d5baf5afd14" kindref="member">worker_threads</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>t.join();</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1ad1c1bbd55c9933b9e5886d378419185c" kindref="member">Scheduler::next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;EventMap&gt;<sp/>events{</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>run_again<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>{<ref refid="classreactor_1_1Scheduler_1adbf93f069a826ffe49c8d890c5af8ff3" kindref="member">m_schedule</ref>};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>shutdown<sp/>if<sp/>there<sp/>are<sp/>no<sp/>more<sp/>events<sp/>in<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.empty()<sp/>&amp;&amp;<sp/>!<ref refid="classreactor_1_1Scheduler_1a77d3790a2a37875efc1980ba55824561" kindref="member">_stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>-&gt;<ref refid="classreactor_1_1Environment_1a7a83a769b141d23297912e7588eb4495" kindref="member">run_forever</ref>())<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>for<sp/>a<sp/>new<sp/>asynchronous<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a75e7baf3e6f17cedca2f23690af7b61d" kindref="member">cv_schedule</ref>.wait(<ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>,<sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.empty();<sp/>});</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>events<sp/>in<sp/>queue.<sp/>-&gt;<sp/>Terminate!&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>-&gt;<ref refid="classreactor_1_1Environment_1a7bc165b2d7a3a6bc6c4573c26170dc50" kindref="member">sync_shutdown</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>shutdown<sp/>call<sp/>might<sp/>schedule<sp/>shutdown<sp/>reactions.<sp/>If<sp/>non<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>scheduled,<sp/>we<sp/>simply<sp/>return.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1a77d3790a2a37875efc1980ba55824561" kindref="member">_stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>run_again<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Shutting<sp/>down<sp/>the<sp/>scheduler&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Tag<sp/>t_next<sp/>=<sp/><ref refid="classreactor_1_1Tag_1a99d7fef2a7b8f865e8d69d45ea9cf17f" kindref="member">Tag::from_logical_time</ref>(<ref refid="classreactor_1_1Scheduler_1a68b0b490d08d5db7890c337d4250ad1c" kindref="member">_logical_time</ref>).<ref refid="classreactor_1_1Tag_1af4cf8dfbcef78f120e71562084e67168" kindref="member">delay</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t_next<sp/>==<sp/><ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin()-&gt;first)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Schedule<sp/>the<sp/>last<sp/>round<sp/>of<sp/>reactions<sp/>including<sp/>all<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;termination<sp/>reactions&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>events<sp/>=<sp/>std::move(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin()-&gt;second);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.erase(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;advance<sp/>logical<sp/>time<sp/>to<sp/>tag<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t_next.time_point()</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t_next.micro_step()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a68b0b490d08d5db7890c337d4250ad1c" kindref="member">_logical_time</ref>.<ref refid="classreactor_1_1LogicalTime_1a50fa399e89e28bece4a1198efe626110" kindref="member">advance_to</ref>(t_next);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>collect<sp/>events<sp/>of<sp/>the<sp/>next<sp/>tag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>t_next<sp/>=<sp/><ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin()-&gt;first;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronize<sp/>with<sp/>physical<sp/>time<sp/>if<sp/>not<sp/>in<sp/>fast<sp/>forward<sp/>mode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>-&gt;<ref refid="classreactor_1_1Environment_1a4f6e899d401fc1238143de9d725c247d" kindref="member">fast_fwd_execution</ref>())<sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>the<sp/>next<sp/>tag<sp/>or<sp/>until<sp/>a<sp/>new<sp/>event<sp/>is<sp/>inserted</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>asynchronously<sp/>into<sp/>the<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>status<sp/>=<sp/><ref refid="classreactor_1_1Scheduler_1a75e7baf3e6f17cedca2f23690af7b61d" kindref="member">cv_schedule</ref>.wait_until(<ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>,<sp/>t_next.time_point());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>over<sp/>if<sp/>the<sp/>event<sp/>queue<sp/>was<sp/>modified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status<sp/>==<sp/>std::cv_status::no_timeout)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>continue<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>retrieve<sp/>all<sp/>events<sp/>with<sp/>tag<sp/>equal<sp/>to<sp/>current<sp/>logical<sp/>time<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>queue</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>events<sp/>=<sp/>std::move(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin()-&gt;second);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.erase(<ref refid="classreactor_1_1Scheduler_1aad84798ec7af707837594ed335532829" kindref="member">event_queue</ref>.begin());</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>advance<sp/>logical<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;advance<sp/>logical<sp/>time<sp/>to<sp/>tag<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t_next.time_point()</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>t_next.micro_step()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a68b0b490d08d5db7890c337d4250ad1c" kindref="member">_logical_time</ref>.<ref refid="classreactor_1_1LogicalTime_1a50fa399e89e28bece4a1198efe626110" kindref="member">advance_to</ref>(t_next);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>mutex<sp/>m_schedule</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>all<sp/>setup<sp/>functions;<sp/>this<sp/>sets<sp/>the<sp/>values<sp/>of<sp/>the<sp/>corresponding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>*events)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>setup<sp/>=<sp/>kv.second;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(setup<sp/>!=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setup();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>std::vector&lt;std::future&lt;void&gt;&gt;<sp/>futures;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>*events)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>:<sp/>kv.first-&gt;triggers())<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>need<sp/>to<sp/>acquire<sp/>the<sp/>mutex.<sp/>At<sp/>this<sp/>point<sp/>the<sp/>scheduler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>be<sp/>the<sp/>only<sp/>thread<sp/>accessing<sp/>the<sp/>reaction<sp/>queue<sp/>as<sp/>none<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>workers<sp/>are<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a65b74e5e2d64189fe30010140a2f8dad" kindref="member">reaction_queue</ref>[n-&gt;index()].push_back(n);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>process<sp/>all<sp/>reactions<sp/>in<sp/>the<sp/>queue<sp/>in<sp/>order<sp/>of<sp/>there<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classreactor_1_1Scheduler_1a65b74e5e2d64189fe30010140a2f8dad" kindref="member">reaction_queue</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>reactions<sp/>=<sp/><ref refid="classreactor_1_1Scheduler_1a65b74e5e2d64189fe30010140a2f8dad" kindref="member">reaction_queue</ref>[i];</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reactions.empty())<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Process<sp/>reactions<sp/>of<sp/>priority<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>any<sp/>reaction<sp/>is<sp/>only<sp/>executed<sp/>once<sp/>even<sp/>if<sp/>it<sp/>was</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>multiple<sp/>times.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::sort(reactions.begin(),<sp/>reactions.end());</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reactions.erase(std::unique(reactions.begin(),<sp/>reactions.end()),</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reactions.end());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classreactor_1_1Scheduler_1ac4b787be81d8b6d7a72ce987d24a2261" kindref="member">using_workers</ref><sp/>&amp;&amp;<sp/>reactions.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a726e2f27cb5fc21f9b276a20e7f47192" kindref="member">dispatch_reactions_to_workers</ref>(reactions);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a776074d94dcd54cc093c295b3359d5eb" kindref="member">execute_reactions_inline</ref>(reactions);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reactions.clear();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanup<sp/>all<sp/>triggered<sp/>actions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>kv<sp/>:<sp/>*events)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>kv.first-&gt;cleanup();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cleanup<sp/>all<sp/>set<sp/>ports</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>:<sp/><ref refid="classreactor_1_1Scheduler_1a19bbe962eab2b7a6c4a25312e4479739" kindref="member">set_ports</ref>)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;cleanup();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/>set_ports.clear();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>run_again;</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a726e2f27cb5fc21f9b276a20e7f47192" kindref="member">Scheduler::dispatch_reactions_to_workers</ref>(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Reaction*&gt;&amp;<sp/>reactions)<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dispatch<sp/>all<sp/>ready<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>(<ref refid="classreactor_1_1Scheduler_1a3f06ec50b64251aeca469a137b3fdf9b" kindref="member">m_reaction_queue</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>reactions)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Schedule<sp/>reaction<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r-&gt;fqn();</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>trigger_reaction,<sp/>r-&gt;container()-&gt;fqn(),<sp/>r-&gt;name(),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a68b0b490d08d5db7890c337d4250ad1c" kindref="member">_logical_time</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a03e5a171cbb041f02fd10fedf7f2f7de" kindref="member">ready_reactions</ref>.push_back(r);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.unlock();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>notify<sp/>workers<sp/>about<sp/>ready<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1ae0b036e6af4ebf47f619bf6ac4b7120d" kindref="member">cv_ready_reactions</ref>.notify_all();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>acquire<sp/>the<sp/>mutex<sp/>now<sp/>as<sp/>workers<sp/>are<sp/>running</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.lock();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classreactor_1_1Scheduler_1a03e5a171cbb041f02fd10fedf7f2f7de" kindref="member">ready_reactions</ref>.empty()<sp/>||<sp/>!<ref refid="classreactor_1_1Scheduler_1a606c5c5af3e45a75b7304fdfd0283e14" kindref="member">executing_reactions</ref>.empty())<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>workers<sp/>...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a5ce0b7fa5a71eaf46b1d423c1ff90557" kindref="member">cv_done_reactions</ref>.wait(<ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a970ac74510f7cce25fd7e9994b11dad6" kindref="member">lock</ref>.unlock();</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a776074d94dcd54cc093c295b3359d5eb" kindref="member">Scheduler::execute_reactions_inline</ref>(</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Reaction*&gt;&amp;<sp/>reactions)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r<sp/>:<sp/>reactions)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Execute<sp/>reaction<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>r-&gt;fqn();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>trigger_reaction,<sp/>r-&gt;container()-&gt;fqn(),<sp/>r-&gt;name(),</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classreactor_1_1Scheduler_1a68b0b490d08d5db7890c337d4250ad1c" kindref="member">_logical_time</ref>);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>reaction_execution_starts,<sp/>0,<sp/>r-&gt;fqn());</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>r-&gt;trigger();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>reaction_execution_finishes,<sp/>0,<sp/>r-&gt;fqn());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><ref refid="classreactor_1_1Scheduler_1a58fbbd0e02d4fc8ef0bcf9330d010c2e" kindref="member">Scheduler::Scheduler</ref>(Environment*<sp/>env)</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/><ref refid="classreactor_1_1Scheduler_1ac4b787be81d8b6d7a72ce987d24a2261" kindref="member">using_workers</ref>(env-&gt;num_workers()<sp/>&gt;<sp/>1),<sp/><ref refid="classreactor_1_1Scheduler_1a7c9c2365d7b10cedb335c81d14610149" kindref="member">_environment</ref>(env)<sp/>{}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="classreactor_1_1Scheduler_1ad6f0cfcd7f07fa81392ab62f172fbd68" kindref="member">Scheduler::~Scheduler</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1ab77f16103f0eb0631886805bc94f231c" kindref="member">Scheduler::schedule_sync</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>tag,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseAction*<sp/>action,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>setup)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><ref refid="assert_8hh_1aca68c0d4ac8df0838e209fb5300f7be3" kindref="member">ASSERT</ref>(_logical_time<sp/>&lt;<sp/>tag);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>verify<sp/>that<sp/>the<sp/>action<sp/>is<sp/>indeed<sp/>allowed<sp/>to<sp/>be<sp/>scheduled<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>reaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Schedule<sp/>action<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>action-&gt;fqn()</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(action-&gt;is_logical()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;<sp/>synchronously<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;<sp/>asynchronously<sp/>&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>with<sp/>tag<sp/>[&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tag.time_point()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>tag.micro_step()</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lg<sp/>=<sp/>using_workers<sp/>?<sp/>std::unique_lock&lt;std::mutex&gt;(m_event_queue)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::unique_lock&lt;std::mutex&gt;();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="trace_8hh_1aeae0efb071b08e657d36788eee20c1a7" kindref="member">tracepoint</ref>(reactor_cpp,<sp/>schedule_action,<sp/>action-&gt;container()-&gt;fqn(),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>action-&gt;name(),<sp/>tag);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(event_queue.find(tag)<sp/>==<sp/>event_queue.end())</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>event_queue.emplace(tag,<sp/>std::make_unique&lt;EventMap&gt;());</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>(*event_queue[tag])[action]<sp/>=<sp/>setup;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a1ca117318ce71ab3c63b7b8160d413af" kindref="member">Scheduler::schedule_async</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>tag,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseAction*<sp/>action,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)&gt;<sp/>setup)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::lock_guard&lt;std::mutex&gt;<sp/>lg(m_schedule);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>schedule_sync(tag,<sp/>action,<sp/>setup);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/>cv_schedule.notify_one();</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a344df614ab8590273a2682eed1d7aa12" kindref="member">Scheduler::set_port</ref>(BasePort*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>log::Debug()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Set<sp/>port<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p-&gt;fqn();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>lg<sp/>=<sp/>using_workers<sp/>?<sp/>std::unique_lock&lt;std::mutex&gt;(m_event_queue)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>std::unique_lock&lt;std::mutex&gt;();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>check<sp/>here<sp/>if<sp/>p<sp/>is<sp/>already<sp/>in<sp/>the<sp/>list.<sp/>This<sp/>means<sp/>clean()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>could<sp/>be<sp/>called<sp/>multiple<sp/>times<sp/>for<sp/>a<sp/>single<sp/>port.<sp/>However,<sp/>calling<sp/>clean()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>multiple<sp/>time<sp/>is<sp/>not<sp/>harmful<sp/>and<sp/>more<sp/>efficient<sp/>then<sp/>checking<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>port<sp/>is<sp/>already<sp/>in<sp/>the<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>set_ports.push_back(p);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>recursively<sp/>search<sp/>for<sp/>triggered<sp/>reactions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>set_port_helper(p);</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a09d04a0906b272908481b48ef12fc3f3" kindref="member">Scheduler::set_port_helper</ref>(BasePort*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><ref refid="assert_8hh_1aca68c0d4ac8df0838e209fb5300f7be3" kindref="member">ASSERT</ref>(!(p-&gt;has_outward_bindings()<sp/>&amp;&amp;<sp/>!p-&gt;triggers().empty()));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p-&gt;has_outward_bindings())<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>binding<sp/>:<sp/>p-&gt;outward_bindings())<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>set_port_helper(binding);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>n<sp/>:<sp/>p-&gt;triggers())<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>reaction_queue[n-&gt;index()].push_back(n);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Scheduler_1a0ef1f93067b868fcf0c26031b7567054" kindref="member">Scheduler::stop</ref>()<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>_stop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>cv_schedule.notify_one();</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/scheduler.cc"/>
  </compounddef>
</doxygen>
