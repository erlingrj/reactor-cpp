<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="logical__time_8cc" kind="file" language="C++">
    <compoundname>logical_time.cc</compoundname>
    <includes refid="logical__time_8hh" local="yes">reactor-cpp/logical_time.hh</includes>
    <includes refid="assert_8hh" local="yes">reactor-cpp/assert.hh</includes>
    <incdepgraph>
      <node id="448">
        <label>cassert</label>
      </node>
      <node id="450">
        <label>stdexcept</label>
      </node>
      <node id="442">
        <label>/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc</label>
        <link refid="logical__time_8cc"/>
        <childnode refid="443" relation="include">
        </childnode>
        <childnode refid="447" relation="include">
        </childnode>
      </node>
      <node id="451">
        <label>string</label>
      </node>
      <node id="447">
        <label>reactor-cpp/assert.hh</label>
        <link refid="assert_8hh"/>
        <childnode refid="448" relation="include">
        </childnode>
        <childnode refid="449" relation="include">
        </childnode>
        <childnode refid="450" relation="include">
        </childnode>
        <childnode refid="451" relation="include">
        </childnode>
      </node>
      <node id="443">
        <label>reactor-cpp/logical_time.hh</label>
        <link refid="logical__time_8hh"/>
        <childnode refid="444" relation="include">
        </childnode>
      </node>
      <node id="449">
        <label>sstream</label>
      </node>
      <node id="446">
        <label>iostream</label>
      </node>
      <node id="444">
        <label>time.hh</label>
        <link refid="time_8hh"/>
        <childnode refid="445" relation="include">
        </childnode>
        <childnode refid="446" relation="include">
        </childnode>
      </node>
      <node id="445">
        <label>chrono</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacereactor">reactor</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2019<sp/>TU<sp/>Dresden</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Authors:</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Christian<sp/>Menard</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logical__time_8hh" kindref="compound">reactor-cpp/logical_time.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="assert_8hh" kindref="compound">reactor-cpp/assert.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacereactor" kindref="compound">reactor</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacereactor_1a0c98d4882f478da43c2c1a169a1fedd2" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.time_point()<sp/>==<sp/>rhs.time_point()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.micro_step()<sp/>==<sp/>rhs.micro_step();</highlight></codeline>
<codeline lineno="18"><highlight class="normal">}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacereactor_1a92dbf562adb06209a1f5632d5e2a0155" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tag&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.time_point()<sp/>&lt;<sp/>rhs.time_point()<sp/>||</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.time_point()<sp/>==<sp/>rhs.time_point()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.micro_step()<sp/>&lt;<sp/>rhs.micro_step());</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">Tag<sp/><ref refid="classreactor_1_1Tag_1ad0577aba35a17c5aac3dec8629977ae1" kindref="member">Tag::from_physical_time</ref>(<ref refid="namespacereactor_1ad950f8d1a46612500286a4af0f167080" kindref="member">TimePoint</ref><sp/>time_point)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>(time_point,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref><sp/><ref refid="classreactor_1_1Tag_1a99d7fef2a7b8f865e8d69d45ea9cf17f" kindref="member">Tag::from_logical_time</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogicalTime&amp;<sp/>lt)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>(lt.time_point(),<sp/>lt.micro_step());</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref><sp/><ref refid="classreactor_1_1Tag_1af4cf8dfbcef78f120e71562084e67168" kindref="member">Tag::delay</ref>(<ref refid="namespacereactor_1aa8375b807a80703545664096c5b5b779" kindref="member">Duration</ref><sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>==<sp/>Duration::zero())<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>(this-&gt;<ref refid="classreactor_1_1Tag_1a24a75e25cfaac63128d8f925ee95c4d9" kindref="member">_time_point</ref>,<sp/>this-&gt;<ref refid="classreactor_1_1Tag_1a7660e5c962c9916a04abe97fad3226ab" kindref="member">_micro_step</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>(this-&gt;<ref refid="classreactor_1_1Tag_1a24a75e25cfaac63128d8f925ee95c4d9" kindref="member">_time_point</ref><sp/>+<sp/>offset,<sp/>0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1LogicalTime_1a50fa399e89e28bece4a1198efe626110" kindref="member">LogicalTime::advance_to</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>&amp;<sp/>tag)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><ref refid="assert_8hh_1aca68c0d4ac8df0838e209fb5300f7be3" kindref="member">ASSERT</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;<sp/>tag);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Tag_1a24a75e25cfaac63128d8f925ee95c4d9" kindref="member">_time_point</ref><sp/>=<sp/>tag.time_point();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classreactor_1_1Tag_1a7660e5c962c9916a04abe97fad3226ab" kindref="member">_micro_step</ref><sp/>=<sp/>tag.micro_step();</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacereactor_1a0c98d4882f478da43c2c1a169a1fedd2" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogicalTime&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.time_point()<sp/>==<sp/>rhs.time_point()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.micro_step()<sp/>==<sp/>rhs.micro_step();</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacereactor_1a92dbf562adb06209a1f5632d5e2a0155" kindref="member">operator&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogicalTime&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.time_point()<sp/>&lt;<sp/>rhs.time_point()<sp/>||</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.time_point()<sp/>==<sp/>rhs.time_point()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.micro_step()<sp/>&lt;<sp/>rhs.micro_step());</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacereactor_1ae9b630f4a987aba9a98c138dd23e87b5" kindref="member">operator&gt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LogicalTime&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classreactor_1_1Tag_1a25458048eeb77969069faee12894f6d4" kindref="member">Tag</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.time_point()<sp/>&gt;<sp/>rhs.time_point()<sp/>||</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(lhs.time_point()<sp/>==<sp/>rhs.time_point()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lhs.micro_step()<sp/>&gt;<sp/>rhs.micro_step());</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>reactor</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc"/>
  </compounddef>
</doxygen>
