<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacereactor" kind="namespace" language="C++">
    <compoundname>reactor</compoundname>
    <innerclass refid="classreactor_1_1Action" prot="public">reactor::Action</innerclass>
    <innerclass refid="classreactor_1_1Action_3_01void_01_4" prot="public">reactor::Action&lt; void &gt;</innerclass>
    <innerclass refid="classreactor_1_1BaseAction" prot="public">reactor::BaseAction</innerclass>
    <innerclass refid="classreactor_1_1BasePort" prot="public">reactor::BasePort</innerclass>
    <innerclass refid="classreactor_1_1Environment" prot="public">reactor::Environment</innerclass>
    <innerclass refid="classreactor_1_1ImmutableValuePtr" prot="public">reactor::ImmutableValuePtr</innerclass>
    <innerclass refid="classreactor_1_1Input" prot="public">reactor::Input</innerclass>
    <innerclass refid="classreactor_1_1LogicalAction" prot="public">reactor::LogicalAction</innerclass>
    <innerclass refid="classreactor_1_1LogicalTime" prot="public">reactor::LogicalTime</innerclass>
    <innerclass refid="classreactor_1_1MutableValuePtr" prot="public">reactor::MutableValuePtr</innerclass>
    <innerclass refid="classreactor_1_1Output" prot="public">reactor::Output</innerclass>
    <innerclass refid="classreactor_1_1PhysicalAction" prot="public">reactor::PhysicalAction</innerclass>
    <innerclass refid="classreactor_1_1Port" prot="public">reactor::Port</innerclass>
    <innerclass refid="classreactor_1_1Port_3_01void_01_4" prot="public">reactor::Port&lt; void &gt;</innerclass>
    <innerclass refid="classreactor_1_1Reaction" prot="public">reactor::Reaction</innerclass>
    <innerclass refid="classreactor_1_1Reactor" prot="public">reactor::Reactor</innerclass>
    <innerclass refid="classreactor_1_1ReactorElement" prot="public">reactor::ReactorElement</innerclass>
    <innerclass refid="classreactor_1_1Scheduler" prot="public">reactor::Scheduler</innerclass>
    <innerclass refid="classreactor_1_1ShutdownAction" prot="public">reactor::ShutdownAction</innerclass>
    <innerclass refid="classreactor_1_1StartupAction" prot="public">reactor::StartupAction</innerclass>
    <innerclass refid="classreactor_1_1Tag" prot="public">reactor::Tag</innerclass>
    <innerclass refid="classreactor_1_1Timer" prot="public">reactor::Timer</innerclass>
    <innerclass refid="classreactor_1_1ValidationError" prot="public">reactor::ValidationError</innerclass>
    <innernamespace refid="namespacereactor_1_1log">reactor::log</innernamespace>
    <innernamespace refid="namespacereactor_1_1operators">reactor::operators</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacereactor_1a08c8e2d85e5bc706b1af8a87e40eec6d" prot="public" static="no">
        <name>PortType</name>
        <enumvalue id="namespacereactor_1a08c8e2d85e5bc706b1af8a87e40eec6da324118a6721dd6b8a9b9f4e327df2bf5" prot="public">
          <name>Input</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacereactor_1a08c8e2d85e5bc706b1af8a87e40eec6da29c2c02a361c9d7028472e5d92cd4a54" prot="public">
          <name>Output</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/port.hh" line="18" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/port.hh" bodystart="18" bodyend="18"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacereactor_1aaea1189d617982457b74127ba74a7340" prot="public" static="no">
        <type>unsigned long</type>
        <definition>using reactor::mstep_t = typedef unsigned long</definition>
        <argsstring></argsstring>
        <name>mstep_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="15" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacereactor_1ad950f8d1a46612500286a4af0f167080" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock, std::chrono::nanoseconds &gt;</type>
        <definition>using reactor::TimePoint = typedef std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::nanoseconds&gt;</definition>
        <argsstring></argsstring>
        <name>TimePoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" line="16" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacereactor_1aa8375b807a80703545664096c5b5b779" prot="public" static="no">
        <type>std::chrono::nanoseconds</type>
        <definition>using reactor::Duration = typedef std::chrono::nanoseconds</definition>
        <argsstring></argsstring>
        <name>Duration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" line="18" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacereactor_1a50e4996eb605ff7e10a26dcdbae25340" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void reactor::recursive_assemble</definition>
        <argsstring>(Reactor *container)</argsstring>
        <name>recursive_assemble</name>
        <param>
          <type><ref refid="classreactor_1_1Reactor" kindref="compound">Reactor</ref> *</type>
          <declname>container</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/environment.cc" line="32" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/environment.cc" bodystart="32" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a3acae8d24d419d39f72ca08bccf13c94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string reactor::dot_name</definition>
        <argsstring>(ReactorElement *r)</argsstring>
        <name>dot_name</name>
        <param>
          <type><ref refid="classreactor_1_1ReactorElement" kindref="compound">ReactorElement</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/environment.cc" line="133" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/environment.cc" bodystart="133" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a0c98d4882f478da43c2c1a169a1fedd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" line="15" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" bodystart="15" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a92dbf562adb06209a1f5632d5e2a0155" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" line="20" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" bodystart="20" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a55f3e1662b62c0347fb588c294b3f471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const LogicalTime &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" line="46" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a632f1427effbba727fcb9f5aa38d6e03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;</definition>
        <argsstring>(const LogicalTime &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" line="51" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ae9b630f4a987aba9a98c138dd23e87b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;</definition>
        <argsstring>(const LogicalTime &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" line="57" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/lib/logical_time.cc" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1afb17997129c7498eff1148813c8970d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void reactor::validate</definition>
        <argsstring>(bool condition, const std::string &amp;message)</argsstring>
        <name>validate</name>
        <param>
          <type>bool</type>
          <declname>condition</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/assert.hh" line="38" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/assert.hh" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a550a07297e731136c8d7570395c5128d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="45" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a2e90ae0e79dfde9f7fbeb54d66a1e3a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="47" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1adb763d87ec4b89428e75916a5150da36" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;=</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="48" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a33339cac3268e44879ed753a397aec99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;=</definition>
        <argsstring>(const Tag &amp;lhs, const Tag &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="49" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a127aac66cd5fa1913c6756d46be9d817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const LogicalTime &amp;lt, const Tag &amp;t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="64" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="64" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a601c2be55dc826bea9a245045613ccc5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;=</definition>
        <argsstring>(const LogicalTime &amp;lt, const Tag &amp;t)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="69" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1aba36ee73a806348027f3a8468faa0dc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;=</definition>
        <argsstring>(const LogicalTime &amp;lt, const Tag &amp;t)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="72" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a97c015047b9fb102d5b41e244da88917" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="76" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a084a8581290e7446f44cc2ca94c47fdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="77" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1acd3c1262138ace0007602d65740bc806" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="80" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ac9d3f8609a66fbbc8a4d375da18a14e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="81" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a187a8a69a9cd1edb808e7c92a7a944a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&lt;=</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="82" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1adb34cd1dff4f0af83c099efae8c2f0cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool reactor::operator&gt;=</definition>
        <argsstring>(const Tag &amp;t, const LogicalTime &amp;lt)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>const <ref refid="classreactor_1_1Tag" kindref="compound">Tag</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1LogicalTime" kindref="compound">LogicalTime</ref> &amp;</type>
          <declname>lt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" line="85" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/logical_time.hh" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a49facd170b623937b3e655518a66b868" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacereactor_1ad950f8d1a46612500286a4af0f167080" kindref="member">TimePoint</ref></type>
        <definition>TimePoint reactor::get_physical_time</definition>
        <argsstring>()</argsstring>
        <name>get_physical_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" line="20" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/time.hh" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a8757688a143832a418a763d3621b1c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt;</type>
        <definition>ImmutableValuePtr&lt;T&gt; reactor::make_immutable_value</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_immutable_value</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="101" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ae4fe60384411a317f354245149b85dbc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt;</type>
        <definition>MutableValuePtr&lt;T&gt; reactor::make_mutable_value</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>make_mutable_value</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="106" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="106" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ab9c3123244fedcd98c92e38874bee37d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, const MutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="111" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="111" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a2fdf4cb9154560eba99721c91aa766cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, const ImmutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="115" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="115" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ab088f033423a22b03f5f6f76ecb04b1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, const MutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="119" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="119" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a9079eb51590f5e096fc3d8cfb073540f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, const ImmutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="123" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="123" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a2155cd0a1349ccb36b00bb369443a084" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, std::nullptr_t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="127" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="127" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a1c5731f8ed4863bfeaaeeba72f5eb765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(std::nullptr_t, const MutableValuePtr&lt; T &gt; &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="131" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ab3fb80a815368302fcd1985b0fee5a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, std::nullptr_t)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="135" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="135" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a59010e2c0f2dd0420fb59abab0a20e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator==</definition>
        <argsstring>(std::nullptr_t, const ImmutableValuePtr&lt; T &gt; &amp;x)</argsstring>
        <name>operator==</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="139" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="139" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a73f7e0bf8b9c8adf7cac8ecc521de7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, const MutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="144" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a79f6e5da337bd260b36b8e702160f1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, const ImmutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="148" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="148" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a247d25ed08296b3afc70c88f7f2e3b5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, const MutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="152" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="152" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a71b00843b7797d6a9d52c3e0b85a06a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, const ImmutableValuePtr&lt; U &gt; &amp;y)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; U &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="156" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1aeef65c8dea31e1e64d5488fbd5be4f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const MutableValuePtr&lt; T &gt; &amp;x, std::nullptr_t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="160" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a43398d2b182f1f579ce7d26b88c8ca97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(std::nullptr_t, const MutableValuePtr&lt; T &gt; &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1MutableValuePtr" kindref="compound">MutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="164" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1ace39af7a63437facb0d3a59aa87e59b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(const ImmutableValuePtr&lt; T &gt; &amp;x, std::nullptr_t)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="168" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespacereactor_1a84d02734e8877c36a53e02a6228348bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool reactor::operator!=</definition>
        <argsstring>(std::nullptr_t, const ImmutableValuePtr&lt; T &gt; &amp;x)</argsstring>
        <name>operator!=</name>
        <param>
          <type>std::nullptr_t</type>
        </param>
        <param>
          <type>const <ref refid="classreactor_1_1ImmutableValuePtr" kindref="compound">ImmutableValuePtr</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" line="172" column="1" bodyfile="/home/runner/work/reactor-cpp/reactor-cpp/include/reactor-cpp/value_ptr.hh" bodystart="172" bodyend="174"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/reactor-cpp/reactor-cpp/lib/action.cc" line="15" column="1"/>
  </compounddef>
</doxygen>
